import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.inspection import PartialDependenceDisplay
from sklearn.inspection import partial_dependence

df = pd.read_excel(r"C:\Users\14027\Downloads\sales_costs_with_gross_profit_margin_500.xlsx")

x = df[["銷售成本(原料)", "銷售成本(人工)", "銷售成本(費用)", "銷售成本(報廢)", "銷售成本(其他)"]]
y = df["毛利率"]

x = x.astype(float)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

temp_model = Pipeline([
    ("scaler", StandardScaler()),
    ("regressor", RandomForestRegressor(n_estimators=100, random_state=42))
])
temp_model.fit(x_train, y_train)

linear_features = []
nonlinear_features = []

x_test_float = x_test.astype(float)

for feature in x_test.columns:
    try:
        pd_result = partial_dependence(
            temp_model.named_steps["regressor"],
            X=x_test_float,
            features=[feature],
            grid_resolution=100
        )
        x_vals = pd_result["grid_values"][0].reshape(-1, 1)
        y_vals = pd_result["average"][0].reshape(-1, 1)

        linreg = LinearRegression()
        linreg.fit(x_vals, y_vals)
        y_pred = linreg.predict(x_vals)

        r2 = r2_score(y_vals, y_pred)

        if r2 >= 0.95:
            linear_features.append(feature)
        else:
            nonlinear_features.append(feature)

    except Exception as e:
        print(f"Skipping feature {feature} due to error: {e}")


linear_model = None
rf_model = None

if linear_features:
    x_train_linear = x_train[linear_features]
    x_test_linear = x_test[linear_features]
    linear_model = Pipeline([
        ("scaler", StandardScaler()),
        ("regressor", LinearRegression())
    ])
    linear_model.fit(x_train_linear, y_train)

if nonlinear_features:
    x_train_nonlinear = x_train[nonlinear_features]
    x_test_nonlinear = x_test[nonlinear_features]
    rf_model = Pipeline([
        ("scaler", StandardScaler()),
        ("regressor", RandomForestRegressor(n_estimators=100, random_state=42))
    ])
    rf_model.fit(x_train_nonlinear, y_train)

linear_preds = linear_model.predict(x_test_linear) if linear_model else None
nonlinear_preds = rf_model.predict(x_test_nonlinear) if rf_model else None

if linear_preds is not None and nonlinear_preds is not None:
    final_preds = (linear_preds + nonlinear_preds) / 2
elif linear_preds is not None:
    final_preds = linear_preds
elif nonlinear_preds is not None:
    final_preds = nonlinear_preds
else:
    raise ValueError("No models trained — check your data or feature setup.")

print("Hybrid Model Performance")
print("Mean Squared Error:", mean_squared_error(y_test, final_preds))
print("R^2 Score:", r2_score(y_test, final_preds))

def predicted_GPM():
    try:
        x1 = float(input("請輸入銷售成本(原料): "))
        x2 = float(input("請輸入銷售成本(人工): "))
        x3 = float(input("請輸入銷售成本(費用): "))
        x4 = float(input("請輸入銷售成本(報廢): "))
        x5 = float(input("請輸入銷售成本(其他): "))
    except ValueError:
        print("請輸入有效的數字。")
        return

    user_input = {
        "銷售成本(原料)": x1,
        "銷售成本(人工)": x2,
        "銷售成本(費用)": x3,
        "銷售成本(報廢)": x4,
        "銷售成本(其他)": x5
    }

    preds = []

    if linear_model and linear_features:
        linear_input = pd.DataFrame([{k: user_input[k] for k in linear_features}])
        preds.append(linear_model.predict(linear_input)[0])

    if rf_model and nonlinear_features:
        nonlinear_input = pd.DataFrame([{k: user_input[k] for k in nonlinear_features}])
        preds.append(rf_model.predict(nonlinear_input)[0])

    if not preds:
        print("無法預測：未訓練任何模型。")
    else:
        final_pred = sum(preds) / len(preds)
        print(f"預測毛利率: {final_pred:.2f}")

if __name__ == "__main__":
    predicted_GPM()
